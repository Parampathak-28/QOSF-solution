#SOLUTION FOR QOSF 2023


from qiskit import QuantumCircuit, Aer, transpile, assemble
from qiskit.providers.aer import AerSimulator
import math

def quantum_oracle(n, negative_values):
    oracle_circuit = QuantumCircuit(n)

    for i, value in enumerate(negative_values):
        if value < 0:
            oracle_circuit.x(i)  # Apply X gate to mark negative values

    return oracle_circuit

def grover_circuit(n, negative_values):
    num_qubits = n
    quantum_circuit = QuantumCircuit(num_qubits)

    # Number of Grover iterations to use for amplitude amplification
    num_iterations = int(math.pi / 4 * math.sqrt(2**num_qubits))
    
    # Initialize superposition
    for qubit in range(num_qubits):
        quantum_circuit.h(qubit)
    
    # Grover's algorithm iterations
    for _ in range(num_iterations):
        # Oracle marking negative values
        oracle = quantum_oracle(num_qubits, negative_values)
        quantum_circuit = quantum_circuit.compose(oracle)
        
        # Diffusion operator
        for qubit in range(num_qubits):
            quantum_circuit.h(qubit)
        for qubit in range(num_qubits):
            quantum_circuit.x(qubit)
        quantum_circuit.h(num_qubits - 1)
        quantum_circuit.mct(list(range(num_qubits - 1)), num_qubits - 1)
        quantum_circuit.h(num_qubits - 1)
        for qubit in range(num_qubits):
            quantum_circuit.x(qubit)
        for qubit in range(num_qubits):
            quantum_circuit.h(qubit)
    
    return quantum_circuit

def find_negative_numbers(integer_list):
    n = len(integer_list)
    
    # Find negative values in the list
    negative_values = [value for value in integer_list if value < 0]

    if not negative_values:
        return False  # No negative values found
    
    # Implement Grover's algorithm to search for negative values
    grover_quantum_circuit = grover_circuit(n, negative_values)
    
    # Measure the quantum registers
    grover_quantum_circuit.measure_all()
    
    # Print the quantum circuit
    print("Quantum Circuit for Grover's Algorithm:")
    print(grover_quantum_circuit.draw(output="text"))
    
    # Simulate the circuit
    simulator = AerSimulator()
    transpiled_circuit = transpile(grover_quantum_circuit, simulator)
    job = simulator.run(transpiled_circuit, shots=1)
    result = job.result()
    counts = result.get_counts()
    
    # Check if any state was measured, indicating the presence of negative values
    return bool(counts)

# Example
A = find_negative_numbers([1, -3, 2, 15])
print(A)  # Should print "True"

B = find_negative_numbers([1, 4, 8, 11])
print(B)  # Should print "False"

C = find_negative_numbers([-15, -14, 2, -1])
print(C)  # Should print "True"

